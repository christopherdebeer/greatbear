Description: >

Parameters:
    
    ApplicationName: 
        Description: This will be used to name the pipeline and build resources
        Type: String
        AllowedPattern: '[a-z0-9-]+'

    GitHubOAuthToken: 
        Description: Create a token with 'repo' and 'admin:repo_hook' permissions here https://github.com/settings/tokens
        Type: String

    GitHubUser:
        Description: Enter GitHub username of the repository owner
        Type: String

    GitHubRepository:
        Description: Enter the repository name that should be monitored for changes
        Type: String

    GitHubBranch:
        Description: Enter the GitHub branch to monitored
        Type: String
        Default: master

Metadata:

    AWS::CloudFormation::Interface:
        ParameterGroups:
            - 
                Label: 
                    default: Application Configuration
                Parameters:
                    - ApplicationName
                Label:
                    default: GitHub Configuration
                Parameters:
                    - GitHubOAuthToken
                    - GitHubUser
                    - GitHubRepository
                    - GitHubBranch
            
        ParameterLabels:
            ApplicationName: 
                default: Application Name
            GitHubRepository: 
                default: Repository Name
            GitHubUser: 
                default: Repository Owner
            GitHubBranch: 
                default: Repository Branch
            GitHubOAuthToken: 
                default: OAuth2 Token

Resources:
    DeploymentBucket:
        Type: AWS::S3::Bucket
        Properties:
            BucketName: !Join [ '-', [ !Ref ApplicationName, 'deployment']]
    CodePipeline:
        Type: AWS::CodePipeline::Pipeline
        Properties:
            Name: !Ref ApplicationName
            RoleArn: !Sub ${CodePipelineRole.Arn}
            ArtifactStore: 
                Type: S3
                Location: !Ref DeploymentBucket
            Stages:
                - 
                    Name: Source
                    Actions:
                        -
                            Name: GitHub
                            ActionTypeId:
                                Category: Source
                                Owner: ThirdParty
                                Version: 1
                                Provider: GitHub
                            OutputArtifacts:
                                -  Name: Source
                            Configuration:
                                Owner: !Ref GitHubUser
                                Repo: !Ref GitHubRepository
                                Branch: !Ref GitHubBranch
                                OAuthToken: !Ref GitHubOAuthToken
                -
                    Name: Build
                    Actions:
                        -
                            Name: CodeBuild
                            InputArtifacts:
                                - Name: Source
                            ActionTypeId: 
                                Category: Build
                                Owner: AWS
                                Version: 1
                                Provider: CodeBuild
                            OutputArtifacts:
                                - Name: Built
                            Configuration: 
                                ProjectName: !Ref CodeBuild
                -
                    Name: Staging
                    Actions:
                        - 
                            Name: DeployLambda
                            RunOrder: 1
                            InputArtifacts:
                                - Name: Built
                                - Name: Source
                            ActionTypeId:
                                Category: Deploy
                                Owner: AWS
                                Version: 1
                                Provider: CloudFormation
                            Configuration:
                                ActionMode: REPLACE_ON_FAILURE
                                RoleArn: !Sub ${CodePipelineCloudFormationRole.Arn}
                                Capabilities: 'CAPABILITY_NAMED_IAM,CAPABILITY_AUTO_EXPAND'
                                StackName: !Sub ${ApplicationName}-staging
                                TemplatePath: Source::template.yml
                                ParameterOverrides: "{ \"DeploymentBucketName\" : { \"Fn::GetArtifactAtt\" : [\"Built\", \"BucketName\"]}, \"DeploymentBucketKey\" : { \"Fn::GetArtifactAtt\" : [\"Built\", \"ObjectKey\"]} }"
    CodeBuild:
        Type: AWS::CodeBuild::Project
        Properties:
            Name: !Ref ApplicationName
            Description: !Sub Build project for ${ApplicationName}
            ServiceRole: !Ref CodeBuildRole
            Source:
                Type: CODEPIPELINE
            Environment:
                ComputeType: BUILD_GENERAL1_SMALL
                Image: aws/codebuild/standard:1.0
                Type: LINUX_CONTAINER
                EnvironmentVariables:
                    -
                        Name: GITHUB_REPO
                        Value: !Sub github.com/${GitHubUser}/${GitHubRepository}
                    - 
                        Name: ARTIFACT_S3_BUCKET
                        Value: !Ref DeploymentBucket
            Artifacts:
                Name: !Ref ApplicationName
                Type: CODEPIPELINE

    CodePipelineRole:
        Type: AWS::IAM::Role
        Properties: 
            Path: /
            RoleName: !Sub ${ApplicationName}-CodePipeline-${AWS::Region}
            AssumeRolePolicyDocument: |
                {
                    "Statement": [{
                        "Action": "sts:AssumeRole",
                        "Effect": "Allow",
                        "Principal": { 
                            "Service": "codepipeline.amazonaws.com" 
                        }
                    }]
                }
            Policies: 
                - 
                    PolicyName: !Sub ${ApplicationName}-CodePipeline-${AWS::Region}
                    PolicyDocument: !Sub |                    
                        {
                            "Statement": [
                                {
                                    "Action": [ "s3:GetBucketVersioning" ],
                                    "Resource": [ "arn:aws:s3:::${DeploymentBucket}" ],
                                    "Effect": "Allow"
                                },
                                {
                                    "Action": [
                                        "s3:PutObject",
                                        "s3:GetObject",
                                        "S3:GetObjectVersion"
                                    ],
                                    "Resource": [
                                        "arn:aws:s3:::${DeploymentBucket}/*"
                                    ],
                                    "Effect": "Allow"
                                },
                                {
                                    "Action": [
                                        "codedeploy:CreateDeployment",
                                        "codedeploy:GetApplicationRevision",
                                        "codedeploy:GetDeployment",
                                        "codedeploy:GetDeploymentConfig",
                                        "codedeploy:RegisterApplicationRevision"
                                    ],
                                    "Resource": "*",
                                    "Effect": "Allow"
                                },
                                {
                                    "Action": [
                                        "cloudformation:CreateStack",
                                        "cloudformation:DeleteStack",
                                        "cloudformation:DescribeStacks",
                                        "cloudformation:UpdateStack",
                                        "cloudformation:CreateChangeSet",
                                        "cloudformation:DeleteChangeSet",
                                        "cloudformation:DescribeChangeSet",
                                        "cloudformation:ExecuteChangeSet",
                                        "cloudformation:SetStackPolicy",
                                        "cloudformation:ValidateTemplate",
                                        "iam:PassRole"
                                    ],
                                    "Resource": [
                                      "arn:aws:iam::${AWS::AccountId}:role/${ApplicationName}-CloudFormation-${AWS::Region}",
                                      "arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${ApplicationName}-staging/*",
                                      "arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${ApplicationName}-production/*"
                                      ],
                                    "Effect": "Allow"
                                },
                                {
                                    "Action": [
                                        "codebuild:BatchGetBuilds",
                                        "codebuild:StartBuild"
                                    ],
                                    "Resource": "*",
                                    "Effect": "Allow"
                                }
                            ]
                        }

    CodePipelineCloudFormationRole:
        Type: AWS::IAM::Role
        Properties: 
            Path: /
            RoleName: !Sub ${ApplicationName}-CloudFormation-${AWS::Region}
            AssumeRolePolicyDocument: |
                    {
                        "Statement": [{
                            "Action": "sts:AssumeRole",
                            "Effect": "Allow",
                            "Principal": { 
                                "Service": "cloudformation.amazonaws.com" 
                            }
                        }]
                    }
            Policies: 
                - 
                    PolicyName: !Sub ${ApplicationName}-CloudFormation-${AWS::Region}
                    PolicyDocument: !Sub |                    
                        {
                            "Statement": [{
                                    "Effect": "Allow",
                                    "Action": [
                                      "ec2:AssociateRouteTable",
                                      "ec2:AttachInternetGateway",
                                      "ec2:AttachNetworkInterface",
                                      "ec2:CreateInternetGateway",
                                      "ec2:CreateNatGateway",
                                      "ec2:CreateNetworkInterface",
                                      "ec2:CreateRoute",
                                      "ec2:CreateRouteTable",
                                      "ec2:CreateSubnet",
                                      "ec2:CreateVolume",
                                      "ec2:CreateVpc",
                                      "ec2:createTags",
                                      "ec2:CreateSecurityGroup",
                                      "ec2:DeleteInternetGateway",
                                      "ec2:DeleteNatGateway",
                                      "ec2:DeleteNetworkInterface",
                                      "ec2:DeleteRoute",
                                      "ec2:DeleteRouteTable",
                                      "ec2:DeleteSecurityGroup",
                                      "ec2:DeleteSubnet",
                                      "ec2:DeleteVolume",
                                      "ec2:DeleteVpc",
                                      "ec2:DeleteTags",
                                      "ec2:DescribeInternetGateways",
                                      "ec2:DescribeVpcs",
                                      "ec2:DescribeRouteTables",
                                      "ec2:DetachInternetGateway",
                                      "ec2:ModifyVpcAttribute",
                                      "ec2:DescribeAvailabilityZones",
                                      "ec2:DescribeAccountAttributes",
                                      "ec2:DescribeSubnets",
                                      "ec2:DescribeSecurityGroups",
                                      "ec2:AuthorizeSecurityGroupIngress",
                                      "ec2:ModifySubnetAttribute",
                                      "ec2:allocateAddress",
                                      "ec2:DisassociateRouteTable",
                                      "ec2:describeAddresses",
                                      "ec2:DescribeNatGateways",
                                      "ec2:releaseAddress",
                                      "ec2:DescribeInstances",
                                      "ec2:RevokeSecurityGroupIngress",
                                      "elasticloadbalancing:CreateLoadBalancer",
                                      "elasticloadbalancing:CreateLoadBalancerListeners",
                                      "elasticloadbalancing:CreateRule",
                                      "elasticloadbalancing:CreateTargetGroup",
                                      "elasticloadbalancing:DeleteLoadBalancer",
                                      "elasticloadbalancing:DeleteLoadBalancerListeners",
                                      "elasticloadbalancing:DeleteRule",
                                      "elasticloadbalancing:DeleteTargetGroup",
                                      "elasticloadbalancing:SetSubnets",
                                      "elasticloadbalancing:DescribeTargetGroups",
                                      "elasticloadbalancingv2:DescribeTargetGroups",
                                      "elasticloadbalancing:DescribeLoadBalancers",
                                      "elasticloadbalancingv2:DescribeLoadBalancers",
                                      "elasticloadbalancing:CreateListener",
                                      "elasticloadbalancing:DescribeListeners",
                                      "elasticloadbalancing:DeleteListener",
                                      "autoscaling:CreateAutoScalingGroup",
                                      "autoscaling:CreateLaunchConfiguration",
                                      "autoscaling:DeleteAutoScalingGroup",
                                      "autoscaling:DeleteLaunchConfiguration",
                                      "autoscaling:DescribeAutoScalingGroup",
                                      "autoscaling:DescribeAutoScalingGroups",
                                      "autoscaling:DescribeScalingActivities",
                                      "autoscaling:DescribeLaunchConfigurations",
                                      "autoscaling:UpdateAutoScalingGroup",
                                      "autoscaling:DescribeAutoScalingInstances",
                                      "codedeploy:GetDeploymentGroup",
                                      "codedeploy:CreateDeploymentGroup",
                                      "codedeploy:DeleteDeploymentGroup"
                                     ],
                                    "Resource": "*"
                            },                                
                            {
                                    "Effect": "Allow",
                                    "Action": [
                                        "iam:GetRole",
                                        "iam:CreateRole",
                                        "iam:PutRolePolicy",
                                        "iam:DeleteRolePolicy",
                                        "iam:DeleteRole",
                                        "iam:CreateInstanceProfile",
                                        "iam:AddRoleToInstanceProfile",
                                        "iam:RemoveRoleFromInstanceProfile",
                                        "iam:PassRole",
                                        "iam:DeleteInstanceProfile"
                                    ],
                                    "Resource": [
                                      "arn:aws:iam::${AWS::AccountId}:role/${ApplicationName}-staging-${AWS::Region}",
                                      "arn:aws:iam::${AWS::AccountId}:role/${ApplicationName}-production-${AWS::Region}",
                                      "arn:aws:iam::${AWS::AccountId}:instance-profile/gotest-staging-InstanceProfile-*",
                                      "arn:aws:iam::${AWS::AccountId}:instance-profile/gotest-production-InstanceProfile-*",
                                      "arn:aws:iam::${AWS::AccountId}:role/${ApplicationName}-CodeDeploy-${AWS::Region}"
                                     ]
                                }
                            ]
                        }

    CodeDeployApplication:
        Type: AWS::CodeDeploy::Application
        Properties:
            ApplicationName: !Sub ${ApplicationName}

    CodeDeployServiceRole:
        Type: AWS::IAM::Role
        Properties: 
            Path: /
            RoleName: !Sub ${ApplicationName}-CodeDeploy-${AWS::Region}
            AssumeRolePolicyDocument: |
                {
                    "Statement": [{
                        "Action": "sts:AssumeRole",
                        "Effect": "Allow",
                        "Principal": { 
                            "Service": "codedeploy.amazonaws.com" 
                        }
                    }]
                }
            Policies: 
                - PolicyName: !Sub ${AWS::StackName}-${AWS::Region}
                  PolicyDocument: !Sub |
                    {
                        "Version": "2012-10-17",
                        "Statement": [
                            {
                            "Effect": "Allow",
                            "Action": [
                                "autoscaling:CompleteLifecycleAction",
                                "autoscaling:DeleteLifecycleHook",
                                "autoscaling:DescribeAutoScalingGroups",
                                "autoscaling:DescribeLifecycleHooks",
                                "autoscaling:PutLifecycleHook",
                                "autoscaling:RecordLifecycleActionHeartbeat",
                                "ec2:DescribeInstances",
                                "ec2:DescribeInstanceStatus",
                                "tag:GetTags",
                                "tag:GetResources",
                                "sns:Publish",
                                "cloudwatch:DescribeAlarms"
                            ],
                            "Resource": "*"
                            }
                        ]
                    }

    CodeBuildRole:
        Type: AWS::IAM::Role
        Properties: 
            Path: /
            RoleName: !Sub ${ApplicationName}-CodeBuild-${AWS::Region}
            AssumeRolePolicyDocument: |
                    {
                        "Statement": [{
                            "Action": "sts:AssumeRole",
                            "Effect": "Allow",
                            "Principal": { 
                                "Service": "codebuild.amazonaws.com" 
                            }
                        }]
                    }
            Policies: 
                - 
                    PolicyName: !Sub ${ApplicationName}-CodeBuild-${AWS::Region}
                    PolicyDocument: !Sub |      
                        {
                            "Statement": [              
                                {
                                    "Effect": "Allow",
                                    "Resource": [ "*" ],
                                    "Action": [
                                        "logs:CreateLogGroup",
                                        "logs:CreateLogStream",
                                        "logs:PutLogEvents"
                                    ]
                                },
                                {
                                    "Effect": "Allow",
                                    "Resource": [
                                        "arn:aws:s3:::${DeploymentBucket}/*"
                                    ],
                                    "Action": [
                                        "s3:GetObject",
                                        "s3:GetObjectVersion",
                                        "s3:PutObject"
                                    ]
                                }
                            ]
                        }
Outputs:

    CodePipelineURL:
        Description: The URL for the created pipeline
        Value: !Sub https://${AWS::Region}.console.aws.amazon.com/codepipeline/home?region=${AWS::Region}#/view/${ApplicationName}      

    CodeDeployApplication:
        Description: The CodeDeploy application used across all environments
        Value: !Ref CodeDeployApplication
        Export:
            Name: !Sub CodeDeployApplication-${ApplicationName}

    CodeDeployServiceRoleArn:
        Description: The CodeDeploy service role used across all environments
        Value: !GetAtt CodeDeployServiceRole.Arn
        Export:
            Name: !Sub CodeDeployServiceRoleArn-${ApplicationName}
